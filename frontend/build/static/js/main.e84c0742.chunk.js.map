{"version":3,"sources":["components/Authentication/AuthShowcase.js","Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/ScrollableChat.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/GroupChatModal.js","components/miscellaneous/ProfileModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","components/miscellaneous/AddMemberModal.js","components/ChatInfoPanel.js","components/panels/NewMessagePanel.js","components/UserModal.js","Pages/Chatpage.js","App.js","reportWebVitals.js","theme.js","index.js"],"names":["floatAnim","keyframes","_templateObject","_taggedTemplateLiteral","AuthShowcase","_jsx","Box","position","minH","base","md","children","_jsxs","h","w","borderRadius","bgGradient","overflow","boxShadow","top","right","filter","bottom","left","bg","backdropFilter","backdropBlur","animation","concat","p","minW","HStack","justify","mb","Text","fontWeight","Badge","colorScheme","fontSize","color","maxW","ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","selectedChat","setSelectedChat","useState","user","setUser","notification","setNotification","chats","setChats","appTheme","setAppTheme","localStorage","getItem","history","useHistory","useEffect","userInfo","JSON","parse","push","_id","setItem","saved","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","SimpleGrid","columns","gap","borderWidth","mt","VStack","spacing","align","FormControl","id","isRequired","FormLabel","InputGroup","InputLeftElement","pointerEvents","EmailIcon","Input","type","placeholder","onChange","e","target","focusBorderColor","size","LockIcon","InputRightElement","width","Button","onClick","handleClick","variant","Stack","direction","sm","async","title","status","duration","isClosable","config","headers","data","axios","post","stringify","error","description","response","message","isLoading","pt","IconButton","aria-label","icon","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","Container","centerContent","px","py","mx","textAlign","Heading","bgClip","fontFamily","Tabs","isFitted","TabList","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","m","i","userId","length","sender","isSameSender","isLastMessage","isSameUser","getSenderFull","loggedUser","users","getDisplayNameForUser","chat","fallbackName","getNickname","item","nicknames","find","n","_n$user","getOtherDisplayName","other","ScrollableChat","ScrollableFeed","map","_m$sender","style","display","Tooltip","label","placement","hasArrow","Avatar","mr","cursor","src","backgroundColor","marginLeft","marginTop","padding","maxWidth","content","socket","selectedChatCompare","SingleChat","_getSenderFull","_getSenderFull2","fetchAgain","setFetchAgain","onToggleInfo","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","io","emit","on","Authorization","token","get","fetchMessages","newMessageRecieved","includes","_Fragment","pb","alignItems","d","ArrowBackIcon","isGroupChat","chatName","Spacer","flexDir","justifyContent","overflowY","Spinner","alignSelf","margin","className","onKeyDown","event","key","chatId","Lottie","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","containerProps","_objectSpread","borderColor","ChatLoading","Skeleton","height","UserBadgeItem","handleFunction","admin","CloseIcon","pl","UserListItem","_hover","background","GroupChatModal","isOpen","onOpen","onClose","useDisclosure","groupChatName","setGroupChatName","selectedUsers","setSelectedUsers","search","setSearch","searchResult","setSearchResult","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","query","handleSearch","flexWrap","u","handleDelete","delUser","sel","slice","handleGroup","userToAdd","ModalFooter","ProfileModal","editing","setEditing","React","saving","setSaving","ViewIcon","Image","boxSize","alt","Divider","logout","removeItem","window","location","href","_JSON$parse","put","MyChats","onStartNew","onSelectChat","setLoggedUser","fetchChats","isDark","searchTerm","setSearchTerm","searchResults","setSearchResults","isSearching","setIsSearching","EditIcon","AddIcon","SearchIcon","border","_placeholder","term","encodeURIComponent","searchUsers","c","startChat","flex","toLowerCase","_find","_last$sender","last","latestMessage","hasUnread","some","isSelected","selectedBg","noOfLines","SideDrawer","loadingChat","setLoadingChat","accessChat","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","ml","AddMemberModal","setQuery","results","setResults","memberIdSet","useMemo","Set","leftIcon","q","seen","filtered","has","add","maxH","Array","isArray","updated","_e$response","_e$response$data","ChatInfoPanel","_ref3","isGroup","Boolean","otherUser","iconColor","xl","Accordion","allowToggle","AccordionItem","AccordionButton","_expanded","as","AccordionIcon","AccordionPanel","SunIcon","Switch","isChecked","checked","defaultValue","onBlur","trim","default","minWidth","SmallCloseIcon","_err$response","_err$response$data","handleRemove","NewMessagePanel","UserModal","onSelectUser","closeModal","setUsers","fetchUsers","Checkbox","selected","handleUserSelect","username","Chatpage","showInfo","setShowInfo","mode","setMode","groups","setGroups","showUserModal","setShowUserModal","fetchGroups","Flex","v","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fonts","heading","_base$fonts","_base$fonts2","colors","brand","primary","secondary","text","surface","components","baseStyle","variants","solid","_active","ghost","defaultProps","tab","_selected","button","_focus","outline","_focusVisible","styles","global","customTheme","extendTheme","initialColorMode","useSystemColorMode","ReactDOM","render","ChakraProvider","theme","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.e84c0742.chunk.js","sourcesContent":["import { Box, HStack, Text, Badge } from \"@chakra-ui/react\";\r\nimport { keyframes } from \"@emotion/react\";\r\n\r\nconst floatAnim = keyframes`\r\n  0% { transform: translateY(0px) scale(1); }\r\n  50% { transform: translateY(-10px) scale(1.02); }\r\n  100% { transform: translateY(0px) scale(1); }\r\n`;\r\n\r\nconst AuthShowcase = () => {\r\n  return (\r\n    <Box position=\"relative\" minH={{ base: \"280px\", md: \"520px\" }}>\r\n      <Box\r\n        h=\"full\"\r\n        w=\"full\"\r\n        borderRadius=\"2xl\"\r\n        bgGradient=\"linear(to-br, blue.500, purple.500)\"\r\n        position=\"relative\"\r\n        overflow=\"hidden\"\r\n        boxShadow=\"lg\"\r\n      >\r\n        {/* soft radial spotlights */}\r\n        <Box\r\n          position=\"absolute\"\r\n          top=\"-20%\"\r\n          right=\"-10%\"\r\n          w=\"70%\"\r\n          h=\"70%\"\r\n          bgGradient=\"radial(circle at 50% 50%, rgba(255,255,255,0.28), transparent 60%)\"\r\n          filter=\"blur(12px)\"\r\n        />\r\n        <Box\r\n          position=\"absolute\"\r\n          bottom=\"-25%\"\r\n          left=\"-15%\"\r\n          w=\"80%\"\r\n          h=\"70%\"\r\n          bgGradient=\"radial(circle at 50% 50%, rgba(255,255,255,0.24), transparent 65%)\"\r\n          filter=\"blur(14px)\"\r\n        />\r\n\r\n        {/* animated glass blobs */}\r\n        <Box\r\n          position=\"absolute\"\r\n          top=\"18%\"\r\n          left=\"12%\"\r\n          w=\"180px\"\r\n          h=\"140px\"\r\n          bg=\"whiteAlpha.300\"\r\n          borderRadius=\"40px\"\r\n          backdropFilter=\"auto\"\r\n          backdropBlur=\"6px\"\r\n          boxShadow=\"xl\"\r\n          animation={`${floatAnim} 7s ease-in-out infinite`}\r\n        />\r\n        <Box\r\n          position=\"absolute\"\r\n          top=\"46%\"\r\n          right=\"16%\"\r\n          w=\"220px\"\r\n          h=\"160px\"\r\n          bg=\"whiteAlpha.200\"\r\n          borderRadius=\"50px\"\r\n          backdropFilter=\"auto\"\r\n          backdropBlur=\"8px\"\r\n          animation={`${floatAnim} 9s ease-in-out infinite`}\r\n        />\r\n\r\n        {/* Floating stat card */}\r\n        <Box\r\n          position=\"absolute\"\r\n          top={{ base: 5, md: 8 }}\r\n          left={{ base: 5, md: 8 }}\r\n          bg=\"white\"\r\n          p={4}\r\n          borderRadius=\"xl\"\r\n          boxShadow=\"2xl\"\r\n          minW=\"200px\"\r\n        >\r\n          <HStack justify=\"space-between\" mb={2}>\r\n            <Text fontWeight=\"bold\">Activity</Text>\r\n            <Badge colorScheme=\"green\">+12%</Badge>\r\n          </HStack>\r\n          <Text fontSize=\"3xl\" fontWeight=\"800\">176,18</Text>\r\n          <Text fontSize=\"xs\" color=\"gray.500\">weekly messages</Text>\r\n        </Box>\r\n\r\n        {/* Floating info card */}\r\n        <Box\r\n          position=\"absolute\"\r\n          bottom={{ base: 5, md: 8 }}\r\n          right={{ base: 5, md: 8 }}\r\n          bg=\"white\"\r\n          p={4}\r\n          borderRadius=\"xl\"\r\n          boxShadow=\"2xl\"\r\n          maxW=\"260px\"\r\n        >\r\n          <Text fontWeight=\"semibold\" mb={1}>Your data, your rules</Text>\r\n          <Text fontSize=\"xs\" color=\"gray.600\">\r\n            Choose what to share. We never post to your channels without permission.\r\n          </Text>\r\n        </Box>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AuthShowcase;\r\n\r\n\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n  const [appTheme, setAppTheme] = useState(() => {\r\n    return localStorage.getItem(\"appTheme\") || \"light\"; \r\n  });\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  useEffect(() => {\r\n    // persist per user if available\r\n    if (user && user._id) {\r\n      localStorage.setItem(`appTheme:${user._id}`, appTheme);\r\n    }\r\n    // also keep a generic key for fallback before user loads\r\n    localStorage.setItem(\"appTheme\", appTheme);\r\n  }, [appTheme, user]);\r\n\r\n  useEffect(() => {\r\n    // load theme for the current user when user changes\r\n    if (user && user._id) {\r\n      const saved = localStorage.getItem(`appTheme:${user._id}`);\r\n      if (saved) setAppTheme(saved);\r\n    }\r\n  }, [user]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n        appTheme,\r\n        setAppTheme,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement, InputLeftElement } from \"@chakra-ui/input\";\r\nimport { VStack, Stack } from \"@chakra-ui/layout\";\r\nimport { EmailIcon, LockIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Text, SimpleGrid, HStack, IconButton } from \"@chakra-ui/react\";\r\nimport AuthShowcase from \"./AuthShowcase\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box w=\"full\">\r\n      <SimpleGrid columns={{ base: 1, md: 2 }} gap={{ base: 6, md: 10 }}>\r\n        {/* Left: Form card */}\r\n        <Box bg=\"white\" borderRadius=\"xl\" boxShadow=\"lg\" borderWidth=\"1px\" p={{ base: 4, md: 8 }}>\r\n          <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\">\r\n            Login\r\n          </Text>\r\n          <Text color=\"gray.500\" mb={6} mt={1}>\r\n            Welcome back! Enter your credentials to continue.\r\n          </Text>\r\n\r\n          <VStack spacing={4} align=\"stretch\">\r\n            <FormControl id=\"email\" isRequired>\r\n              <FormLabel>Email address</FormLabel>\r\n              <InputGroup>\r\n                <InputLeftElement pointerEvents=\"none\" children={<EmailIcon color=\"gray.400\" />} />\r\n                <Input\r\n                  value={email}\r\n                  type=\"email\"\r\n                  placeholder=\"Enter your email\"\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  focusBorderColor=\"blue.400\"\r\n                />\r\n              </InputGroup>\r\n            </FormControl>\r\n\r\n            <FormControl id=\"password\" isRequired>\r\n              <FormLabel>Password</FormLabel>\r\n              <InputGroup size=\"md\">\r\n                <InputLeftElement pointerEvents=\"none\" children={<LockIcon color=\"gray.400\" />} />\r\n                <Input\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  type={show ? \"text\" : \"password\"}\r\n                  placeholder=\"Enter your password\"\r\n                  focusBorderColor=\"blue.400\"\r\n                />\r\n                <InputRightElement width=\"4.5rem\">\r\n                  <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} variant=\"ghost\">\r\n                    {show ? \"Hide\" : \"Show\"}\r\n                  </Button>\r\n                </InputRightElement>\r\n              </InputGroup>\r\n            </FormControl>\r\n\r\n            <Stack spacing={4} direction={{ base: \"column\", sm: \"row\" }} align=\"stretch\">\r\n              <Button colorScheme=\"blue\" w={{ base: \"100%\", sm: \"70%\" }} onClick={submitHandler} isLoading={loading}>\r\n                Login\r\n              </Button>\r\n              <Button\r\n                variant=\"outline\"\r\n                colorScheme=\"red\"\r\n                w={{ base: \"100%\", sm: \"30%\" }}\r\n                onClick={() => {\r\n                  setEmail(\"guest@example.com\");\r\n                  setPassword(\"123456\");\r\n                }}\r\n              >\r\n                Use Guest\r\n              </Button>\r\n            </Stack>\r\n\r\n              <HStack spacing={3} justify=\"center\" pt={2} color=\"gray.500\">\r\n              <Text fontSize=\"sm\">Or continue with</Text>\r\n              <HStack spacing={2}>\r\n                <IconButton aria-label=\"alt-1\" size=\"sm\" variant=\"ghost\" icon={<EmailIcon />} />\r\n                <IconButton aria-label=\"alt-2\" size=\"sm\" variant=\"ghost\" icon={<LockIcon />} />\r\n              </HStack>\r\n            </HStack>\r\n          </VStack>\r\n        </Box>\r\n\r\n        {/* Right: Illustration area */}\r\n        <AuthShowcase />\r\n      </SimpleGrid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement, InputLeftElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { EmailIcon, LockIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Text, SimpleGrid, HStack, IconButton } from \"@chakra-ui/react\";\r\nimport AuthShowcase from \"./AuthShowcase\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box w=\"full\">\r\n      <SimpleGrid columns={{ base: 1, md: 2 }} gap={{ base: 6, md: 10 }}>\r\n        {/* Left: Form card */}\r\n        <Box\r\n          bg=\"white\"\r\n          borderRadius=\"xl\"\r\n          boxShadow=\"lg\"\r\n          borderWidth=\"1px\"\r\n          p={{ base: 4, md: 8 }}\r\n        >\r\n          <Text fontSize={{ base: \"xl\", md: \"2xl\" }} fontWeight=\"bold\">\r\n            Sign Up\r\n          </Text>\r\n          <Text color=\"gray.500\" mb={6} mt={1}>\r\n            Create your VibeLine account and start chatting instantly.\r\n          </Text>\r\n\r\n          <VStack spacing={4} align=\"stretch\">\r\n            <FormControl id=\"first-name\" isRequired>\r\n              <FormLabel>Name</FormLabel>\r\n              <Input placeholder=\"Enter your name\" onChange={(e) => setName(e.target.value)} />\r\n            </FormControl>\r\n\r\n            <FormControl id=\"email\" isRequired>\r\n              <FormLabel>Email address</FormLabel>\r\n              <InputGroup>\r\n                <InputLeftElement pointerEvents=\"none\" children={<EmailIcon color=\"gray.400\" />} />\r\n                <Input\r\n                  type=\"email\"\r\n                  placeholder=\"Enter your email\"\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                  focusBorderColor=\"blue.400\"\r\n                />\r\n              </InputGroup>\r\n            </FormControl>\r\n\r\n            <FormControl id=\"password\" isRequired>\r\n              <FormLabel>Password</FormLabel>\r\n              <InputGroup size=\"md\">\r\n                <InputLeftElement pointerEvents=\"none\" children={<LockIcon color=\"gray.400\" />} />\r\n                <Input\r\n                  type={show ? \"text\" : \"password\"}\r\n                  placeholder=\"Enter password\"\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                  focusBorderColor=\"blue.400\"\r\n                />\r\n                <InputRightElement width=\"4.5rem\">\r\n                  <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} variant=\"ghost\">\r\n                    {show ? \"Hide\" : \"Show\"}\r\n                  </Button>\r\n                </InputRightElement>\r\n              </InputGroup>\r\n            </FormControl>\r\n\r\n            <FormControl id=\"password-confirm\" isRequired>\r\n              <FormLabel>Confirm Password</FormLabel>\r\n              <InputGroup size=\"md\">\r\n                <InputLeftElement pointerEvents=\"none\" children={<LockIcon color=\"gray.400\" />} />\r\n                <Input\r\n                  type={show ? \"text\" : \"password\"}\r\n                  placeholder=\"Confirm password\"\r\n                  onChange={(e) => setConfirmpassword(e.target.value)}\r\n                  focusBorderColor=\"blue.400\"\r\n                />\r\n                <InputRightElement width=\"4.5rem\">\r\n                  <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} variant=\"ghost\">\r\n                    {show ? \"Hide\" : \"Show\"}\r\n                  </Button>\r\n                </InputRightElement>\r\n              </InputGroup>\r\n            </FormControl>\r\n\r\n            <FormControl id=\"pic\">\r\n              <FormLabel>Upload your picture</FormLabel>\r\n              <Input\r\n                type=\"file\"\r\n                p={1.5}\r\n                accept=\"image/*\"\r\n                onChange={(e) => postDetails(e.target.files[0])}\r\n              />\r\n            </FormControl>\r\n\r\n            <Button colorScheme=\"blue\" w=\"100%\" mt={2} onClick={submitHandler} isLoading={picLoading}>\r\n              Create account\r\n            </Button>\r\n\r\n            <HStack spacing={3} justify=\"center\" pt={2} color=\"gray.500\">\r\n              <Text fontSize=\"sm\">Or continue with</Text>\r\n              <HStack spacing={2}>\r\n                <IconButton aria-label=\"alt-1\" size=\"sm\" variant=\"ghost\" icon={<EmailIcon />} />\r\n                <IconButton aria-label=\"alt-2\" size=\"sm\" variant=\"ghost\" icon={<LockIcon />} />\r\n              </HStack>\r\n            </HStack>\r\n          </VStack>\r\n        </Box>\r\n\r\n        {/* Right: Illustration area */}\r\n        <AuthShowcase />\r\n      </SimpleGrid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"100%\" centerContent={false} px={0} py={{ base: 6, md: 10 }}>\r\n      <Box w=\"full\" maxW=\"1400px\" mx=\"auto\" px={{ base: 4, md: 8 }}>\r\n        <Box textAlign=\"center\" mb={{ base: 4, md: 6 }}>\r\n          <Heading size=\"lg\" bgGradient=\"linear(to-r, blue.500, teal.400)\" bgClip=\"text\" fontFamily=\"Work sans\">\r\n          VibeLine\r\n          </Heading>\r\n          <Text mt={2} color=\"gray.600\" fontSize={{ base: \"sm\", md: \"md\" }}>\r\n            Welcome back. Please sign in or create a new account to continue.\r\n          </Text>\r\n        </Box>\r\n        <Tabs isFitted colorScheme=\"blue\" variant=\"enclosed\">\r\n          <TabList mb={6}>\r\n            <Tab fontWeight=\"600\">Login</Tab>\r\n            <Tab fontWeight=\"600\">Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel px={0}>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel px={0}>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n\r\nexport const getSenderPic = (loggedUser, users) => {\r\n  const other = users[0]?._id === loggedUser?._id ? users[1] : users[0];\r\n  return other?.pic || \"\";\r\n};\r\n\r\n// Nicknames helpers\r\nexport const getNickname = (chat, userId) => {\r\n  const list = chat?.nicknames || [];\r\n  const item = list.find((n) => (n.user?._id || n.user) === userId);\r\n  return item?.name || \"\";\r\n};\r\n\r\nexport const getDisplayNameForUser = (chat, userId, fallbackName) => {\r\n  const nick = getNickname(chat, userId);\r\n  return nick || fallbackName || \"\";\r\n};\r\n\r\nexport const getOtherDisplayName = (loggedUser, chat) => {\r\n  const other = getSenderFull(loggedUser, chat.users);\r\n  return getDisplayNameForUser(chat, other?._id, other?.name);\r\n};\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { getDisplayNameForUser } from \"../config/ChatLogics\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user, appTheme } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={getDisplayNameForUser(m.chat || {}, m.sender._id, m.sender.name)} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender?.pic || undefined}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor:\r\n                  m.sender._id === user._id\r\n                    ? (appTheme === \"dark\" ? \"#2563EB\" : \"#25D366\")\r\n                    : (appTheme === \"dark\" ? \"#374151\" : \"#DCF8C6\"),\r\n                color: `${m.sender._id === user._id ? \"white\" : (appTheme === \"dark\" ? \"#E5E7EB\" : \"#202C33\")}`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text, HStack, Spacer } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast, Avatar } from \"@chakra-ui/react\";\r\nimport { getSender, getOtherDisplayName, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; \r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain, variant = \"light\", onToggleInfo }) => {\r\n  const { appTheme } = ChatState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <HStack w=\"100%\" pb={3} px={2} alignItems=\"center\">\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n              aria-label=\"back\"\r\n            />\r\n            <HStack spacing={3}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                name={\r\n                  !selectedChat.isGroupChat\r\n                    ? getSenderFull(user, selectedChat.users)?.name\r\n                    : selectedChat.chatName\r\n                }\r\n                src={\r\n                  !selectedChat.isGroupChat\r\n                    ? getSenderFull(user, selectedChat.users)?.pic || undefined\r\n                    : undefined\r\n                }\r\n              />\r\n              <Text fontSize={{ base: \"24px\", md: \"28px\" }} fontFamily=\"Work sans\" fontWeight=\"700\">\r\n                {messages &&\r\n                  (!selectedChat.isGroupChat\r\n                    ? getOtherDisplayName(user, selectedChat)\r\n                    : selectedChat.chatName)}\r\n              </Text>\r\n            </HStack>\r\n            <Spacer />\r\n            <IconButton\r\n              aria-label=\"chat details\"\r\n              icon={<Text fontSize=\"xl\">⋮</Text>}\r\n              variant={appTheme === \"dark\" ? \"outline\" : \"solid\"}\r\n              colorScheme=\"blue\"\r\n              size=\"sm\"\r\n              onClick={onToggleInfo}\r\n            />\r\n          </HStack>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg={appTheme === \"dark\" ? \"gray.900\" : \"brand.background\"}\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg={appTheme === \"dark\" ? \"gray.700\" : \"white\"}\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain, variant = \"light\", containerProps = {}, onToggleInfo }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg={variant === \"dark\" ? \"gray.800\" : \"white\"}\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n      borderColor={variant === \"dark\" ? \"whiteAlpha.300\" : \"gray.200\"}\r\n      color={variant === \"dark\" ? \"gray.100\" : \"inherit\"}\r\n      {...containerProps}\r\n    >\r\n      <SingleChat\r\n        fetchAgain={fetchAgain}\r\n        setFetchAgain={setFetchAgain}\r\n        variant={variant}\r\n        onToggleInfo={onToggleInfo}\r\n      />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John,  Maryam, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n  VStack,\r\n  HStack,\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Divider,\r\n} from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport axios from \"axios\";\r\nimport React from \"react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { setUser } = ChatState();\r\n  const [editing, setEditing] = React.useState(false);\r\n  const [name, setName] = React.useState(user?.name || \"\");\r\n  const [pic, setPic] = React.useState(user?.pic || \"\");\r\n  const [saving, setSaving] = React.useState(false);\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    window.location.href = \"/\";\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      setSaving(true);\r\n      const config = { headers: { Authorization: `Bearer ${JSON.parse(localStorage.getItem(\"userInfo\"))?.token}` } };\r\n      const { data } = await axios.put(\"/api/user/profile\", { name, pic }, config);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setUser(data);\r\n      setEditing(false);\r\n    } catch (e) {\r\n      // handle silently for now\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <VStack spacing={4} align=\"stretch\">\r\n              <HStack spacing={4} align=\"center\" justify=\"center\">\r\n                <Image borderRadius=\"full\" boxSize=\"120px\" src={pic} alt={name} />\r\n              </HStack>\r\n              <VStack spacing={2} align=\"stretch\">\r\n                <Text fontSize=\"sm\" color=\"gray.500\">Email</Text>\r\n                <Text>{user.email}</Text>\r\n                <Divider />\r\n                {editing ? (\r\n                  <>\r\n                    <FormControl>\r\n                      <FormLabel>Name</FormLabel>\r\n                      <Input value={name} onChange={(e) => setName(e.target.value)} />\r\n                    </FormControl>\r\n                    <FormControl>\r\n                      <FormLabel>Profile image URL</FormLabel>\r\n                      <Input value={pic} onChange={(e) => setPic(e.target.value)} />\r\n                    </FormControl>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Text><b>Name:</b> {name}</Text>\r\n                  </>\r\n                )}\r\n              </VStack>\r\n            </VStack>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <HStack w=\"full\" justify=\"space-between\">\r\n              <Button variant=\"ghost\" onClick={logout}>Logout</Button>\r\n              <HStack>\r\n                <Button variant=\"ghost\" onClick={onClose}>Close</Button>\r\n                {editing ? (\r\n                  <Button colorScheme=\"blue\" isLoading={saving} onClick={save}>Save</Button>\r\n                ) : (\r\n                  <Button onClick={() => setEditing(true)}>Edit</Button>\r\n                )}\r\n              </HStack>\r\n            </HStack>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender, getOtherDisplayName, getDisplayNameForUser } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport { Button, IconButton, Input, InputGroup, InputLeftElement, Avatar, VStack, Text, Box, HStack, Stack } from \"@chakra-ui/react\";\r\nimport { EditIcon, SearchIcon } from \"@chakra-ui/icons\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain, variant = \"light\", containerProps = {}, onStartNew, onSelectChat }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats, notification, appTheme } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  const isDark = appTheme === \"dark\";\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const searchUsers = async (term) => {\r\n    setSearchTerm(term);\r\n    if (!term) {\r\n      setSearchResults([]);\r\n      return;\r\n    }\r\n    try {\r\n      setIsSearching(true);\r\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n      const { data } = await axios.get(`/api/user?search=${encodeURIComponent(term)}`, config);\r\n      // Exclude self\r\n      setSearchResults((data || []).filter((u) => u._id !== user._id));\r\n    } catch (e) {\r\n      // ignore\r\n    } finally {\r\n      setIsSearching(false);\r\n    }\r\n  };\r\n\r\n  const startChat = async (userId) => {\r\n    try {\r\n      const config = { headers: { \"Content-type\": \"application/json\", Authorization: `Bearer ${user.token}` } };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...(chats || [])]);\r\n      setSelectedChat(data);\r\n      setSearchTerm(\"\");\r\n      setSearchResults([]);\r\n    } catch (e) { }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n        flexDir=\"column\"\r\n        alignItems=\"center\"\r\n        p={3}\r\n        bg={isDark ? \"gray.800\" : \"brand.surface\"}\r\n        w={{ base: \"100%\", md: \"31%\" }}\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n        borderColor={isDark ? \"whiteAlpha.300\" : \"gray.200\"}\r\n        color={isDark ? \"gray.100\" : \"inherit\"}\r\n        {...containerProps}\r\n      >\r\n        <HStack pb={3} px={3} w=\"100%\" justify=\"space-between\" align=\"center\">\r\n          <HStack spacing={3}>\r\n            <ProfileModal user={user}>\r\n              <Avatar size=\"sm\" name={user?.name} src={user?.pic} cursor=\"pointer\" />\r\n            </ProfileModal>\r\n            <Text fontSize={{ base: \"22px\", md: \"24px\" }} fontWeight=\"700\" fontFamily=\"Work sans\">\r\n              Chats\r\n            </Text>\r\n          </HStack>\r\n          <HStack>\r\n            <IconButton aria-label=\"new\" icon={<EditIcon />} size=\"sm\" variant=\"ghost\" onClick={() => onStartNew && onStartNew()} />\r\n            <GroupChatModal>\r\n              <IconButton aria-label=\"new group\" icon={<AddIcon />} size=\"sm\" colorScheme=\"blue\" />\r\n            </GroupChatModal>\r\n          </HStack>\r\n        </HStack>\r\n        <Box px={3} w=\"100%\" pb={2}>\r\n          <InputGroup size=\"sm\">\r\n            <InputLeftElement pointerEvents=\"none\" children={<SearchIcon color={isDark ? \"gray.300\" : \"brand.secondary\"} />} />\r\n            <Input\r\n              placeholder=\"Search Messenger\"\r\n              bg={isDark ? \"gray.700\" : \"white\"}\r\n              border=\"none\"\r\n              borderRadius=\"full\"\r\n              color={isDark ? \"gray.100\" : \"brand.text\"}\r\n              _placeholder={{ color: isDark ? \"gray.400\" : \"gray.500\" }}\r\n              value={searchTerm}\r\n              onChange={(e) => searchUsers(e.target.value)}\r\n            />\r\n          </InputGroup>\r\n        </Box>\r\n        <Box\r\n          d=\"flex\"\r\n          flexDir=\"column\"\r\n          p={3}\r\n          bg={isDark ? \"gray.800\" : \"#F8F8F8\"}\r\n          w=\"100%\"\r\n          h=\"100%\"\r\n          borderRadius=\"lg\"\r\n          overflowY=\"hidden\"\r\n        >\r\n          {searchTerm && (\r\n            <VStack align=\"stretch\" spacing={1} mb={3}>\r\n              {isSearching && <Text fontSize=\"sm\" color={isDark ? \"gray.300\" : \"gray.600\"}>Searching…</Text>}\r\n              {!isSearching && searchResults.length === 0 && (\r\n                <Text fontSize=\"sm\" color={isDark ? \"gray.300\" : \"gray.600\"}>No users found</Text>\r\n              )}\r\n              {!isSearching && searchResults.map((u) => (\r\n                <HStack key={u._id} spacing={3} p={2} borderRadius=\"md\" _hover={{ bg: isDark ? \"gray.700\" : \"white\" }} cursor=\"pointer\" onClick={() => startChat(u._id)}>\r\n                  <Avatar size=\"sm\" name={u.name} src={u.pic} />\r\n                  <VStack spacing={0} align=\"start\" flex={1}>\r\n                    <Text fontWeight={600}>{u.name}</Text>\r\n                    <Text fontSize=\"xs\" color={isDark ? \"gray.300\" : \"gray.600\"}>{u.email}</Text>\r\n                  </VStack>\r\n                  <Button size=\"xs\" colorScheme=\"blue\">Chat</Button>\r\n                </HStack>\r\n              ))}\r\n            </VStack>\r\n          )}\r\n          {chats ? (\r\n            <Stack overflowY=\"scroll\" spacing={1}>\r\n              {chats\r\n                .filter((chat) => {\r\n                  const name = !chat.isGroupChat ? getOtherDisplayName(loggedUser, chat) : chat.chatName;\r\n                  return name.toLowerCase().includes(searchTerm.toLowerCase());\r\n                })\r\n                .map((chat) => {\r\n                  const name = !chat.isGroupChat ? getOtherDisplayName(loggedUser, chat) : chat.chatName;\r\n                  const last = chat.latestMessage;\r\n                  const hasUnread = notification?.some((n) => n.chat && n.chat._id === chat._id);\r\n                  const isSelected = selectedChat === chat;\r\n                  const selectedBg = \"#E7F3FF\";\r\n                  const hoverBg = \"#F0F2F5\";\r\n                  return (\r\n                    <HStack\r\n                      key={chat._id}\r\n                      onClick={() => { setSelectedChat(chat); if (onSelectChat) onSelectChat(); }}\r\n                      cursor=\"pointer\"\r\n                      spacing={3}\r\n                      p={2}\r\n                      borderRadius=\"md\"\r\n                      bg={isSelected ? (isDark ? \"blue.700\" : selectedBg) : \"transparent\"}\r\n                      _hover={{ bg: isSelected ? (isDark ? \"blue.700\" : selectedBg) : (isDark ? \"gray.700\" : hoverBg) }}\r\n                      color={isSelected ? (isDark ? \"white\" : \"inherit\") : (isDark ? \"gray.100\" : \"black\")}\r\n                      align=\"center\"\r\n                    >\r\n                      <Avatar\r\n                        size=\"sm\"\r\n                        name={name}\r\n                        src={\r\n                          !chat.isGroupChat\r\n                            ? (chat.users || []).find((u) => u._id !== loggedUser?._id)?.pic || undefined\r\n                            : undefined\r\n                        }\r\n                      />\r\n                      <VStack spacing={0} align=\"start\" flex={1}>\r\n                        <Text fontWeight={hasUnread ? \"700\" : \"600\"} noOfLines={1}>\r\n                          {name}\r\n                        </Text>\r\n                        {last && (\r\n                          <Text fontSize=\"xs\" color={isSelected ? (isDark ? \"whiteAlpha.900\" : \"gray.600\") : isDark ? \"gray.300\" : \"gray.600\"} noOfLines={1}>\r\n                            {last.sender?._id ? `${getDisplayNameForUser(chat, last.sender._id, last.sender.name)}: ` : \"\"}\r\n                            {last.content}\r\n                          </Text>\r\n                        )}\r\n                      </VStack>\r\n                      {hasUnread && <Box w={2} h={2} bg={isDark ? \"#60A5FA\" : \"#0084FF\"} borderRadius=\"full\" />}\r\n                    </HStack>\r\n                  );\r\n                })}\r\n            </Stack>\r\n          ) : (\r\n            <ChatLoading />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button, Menu, MenuButton, MenuList, MenuItem, MenuDivider } from \"@chakra-ui/react\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import React, { useMemo, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalCloseButton,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Input,\r\n  VStack,\r\n  HStack,\r\n  Avatar,\r\n  Text,\r\n  useDisclosure,\r\n  useToast,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport { AddIcon } from \"@chakra-ui/icons\";\r\n\r\nconst AddMemberModal = ({ chat }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { user, setSelectedChat, chats, setChats, appTheme } = ChatState();\r\n  const isDark = appTheme === \"dark\";\r\n  const toast = useToast();\r\n  const [query, setQuery] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const [results, setResults] = useState([]);\r\n\r\n  const memberIdSet = useMemo(() => new Set((chat?.users || []).map((u) => u?._id || u)), [chat]);\r\n\r\n  const search = async (q) => {\r\n    setQuery(q);\r\n    if (!q) return setResults([]);\r\n    try {\r\n      setLoading(true);\r\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n      const { data } = await axios.get(`/api/user?search=${encodeURIComponent(q)}`, config);\r\n      // filter out users already present and self, and de-dup by _id\r\n      const seen = new Set();\r\n      const filtered = (data || [])\r\n        .filter((u) => u._id !== user._id && !memberIdSet.has(u._id))\r\n        .filter((u) => (seen.has(u._id) ? false : (seen.add(u._id), true)));\r\n      setResults(filtered);\r\n    } catch (e) {\r\n      console.error(e);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const add = async (userId) => {\r\n    try {\r\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n      const { data } = await axios.put(\"/api/chat/groupadd\", { chatId: chat._id, userId }, config);\r\n      setSelectedChat(data);\r\n      if (Array.isArray(chats)) {\r\n        const updated = chats.map((c) => (c._id === data._id ? data : c));\r\n        setChats(updated);\r\n      }\r\n      toast({ title: \"Member added\", status: \"success\", duration: 2000, isClosable: true });\r\n      onClose();\r\n    } catch (e) {\r\n      toast({ title: \"Failed to add\", description: e?.response?.data?.message || \"\", status: \"error\", duration: 3000, isClosable: true });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button leftIcon={<AddIcon />} w=\"100%\" size=\"sm\" colorScheme=\"teal\" onClick={onOpen} borderRadius=\"md\">\r\n        Add member\r\n      </Button>\r\n      <Modal isOpen={isOpen} onClose={onClose} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent bg={isDark ? \"gray.800\" : \"white\"} color={isDark ? \"gray.100\" : \"inherit\"}>\r\n          <ModalHeader>Add member</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <Input\r\n              placeholder=\"Search by name or email\"\r\n              value={query}\r\n              onChange={(e) => search(e.target.value)}\r\n              bg={isDark ? \"gray.700\" : \"white\"}\r\n            />\r\n            <VStack align=\"stretch\" mt={3} spacing={2} maxH=\"300px\" overflowY=\"auto\">\r\n              {loading && <Spinner size=\"sm\" />}\r\n              {!loading && results.length === 0 && query && (\r\n                <Text color={isDark ? \"gray.400\" : \"gray.600\"} fontSize=\"sm\" px={1}>No users found</Text>\r\n              )}\r\n              {!loading && results.map((u) => (\r\n                <HStack key={u._id} justify=\"space-between\" p={2} borderRadius=\"md\" _hover={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }}>\r\n                  <HStack>\r\n                    <Avatar size=\"sm\" name={u.name} src={u.pic} />\r\n                    <Text>{u.name}</Text>\r\n                  </HStack>\r\n                  <Button size=\"xs\" colorScheme=\"blue\" onClick={() => add(u._id)}>Add</Button>\r\n                </HStack>\r\n              ))}\r\n            </VStack>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button variant={isDark ? \"outline\" : \"ghost\"} onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddMemberModal;\r\n\r\n","import React from \"react\";\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Grid,\r\n  GridItem,\r\n  HStack,\r\n  Icon,\r\n  IconButton,\r\n  Text,\r\n  VStack,\r\n  Accordion,\r\n  AccordionItem,\r\n  AccordionButton,\r\n  AccordionIcon,\r\n  AccordionPanel,\r\n  List,\r\n  ListItem,\r\n  Switch,\r\n} from \"@chakra-ui/react\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { ChevronRightIcon, SearchIcon, BellIcon, SettingsIcon, AttachmentIcon, LinkIcon, ViewIcon, LockIcon, WarningTwoIcon, TimeIcon, AtSignIcon, NotAllowedIcon, SunIcon, StarIcon, EditIcon, SmallCloseIcon } from \"@chakra-ui/icons\";\r\nimport ThemeModal from \"./miscellaneous/ThemeModal\";\r\nimport AddMemberModal from \"./miscellaneous/AddMemberModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { getSenderFull, getDisplayNameForUser } from \"../config/ChatLogics\";\r\n\r\nconst SectionRow = ({ icon, label, onClick, rightEl }) => (\r\n  <HStack\r\n    w=\"full\"\r\n    justify=\"space-between\"\r\n    p={3}\r\n    borderRadius=\"md\"\r\n    _hover={{ bg: \"whiteAlpha.100\" }}\r\n    cursor=\"pointer\"\r\n    onClick={onClick}\r\n  >\r\n    <HStack spacing={3}>\r\n      {icon && <Icon as={icon} />}\r\n      <Text>{label}</Text>\r\n    </HStack>\r\n    {rightEl || <ChevronRightIcon />}\r\n  </HStack>\r\n);\r\n\r\n\r\nconst SettingRow = ({ icon, label, subtitle, isDark }) => (\r\n  <HStack p={3} borderRadius=\"md\" _hover={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }} justify=\"space-between\">\r\n    <HStack spacing={3}>\r\n      <Icon as={icon} />\r\n      <Box>\r\n        <Text>{label}</Text>\r\n        {subtitle && (\r\n          <Text fontSize=\"xs\" color={isDark ? \"gray.400\" : \"gray.500\"}>\r\n            {subtitle}\r\n          </Text>\r\n        )}\r\n      </Box>\r\n    </HStack>\r\n  </HStack>\r\n);\r\n\r\nconst ChatInfoPanel = ({ chat, variant = \"dark\" }) => {\r\n  const { user, appTheme, setAppTheme, setSelectedChat, chats, setChats } = ChatState();\r\n  const isGroup = Boolean(chat?.isGroupChat);\r\n  const otherUser = !isGroup && chat ? getSenderFull(user, chat.users) : null;\r\n  const isDark = appTheme === \"dark\";\r\n  const iconColor = isDark ? \"gray.200\" : \"gray.600\";\r\n  const toast = useToast();\r\n\r\n  const handleRemove = async (userId) => {\r\n    if (!chat?._id) return;\r\n    try {\r\n      const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n      const { data } = await axios.put(\r\n        \"/api/chat/groupremove\",\r\n        { chatId: chat._id, userId },\r\n        config\r\n      );\r\n      setSelectedChat(data);\r\n      if (Array.isArray(chats)) {\r\n        const updated = chats.map((c) => (c._id === data._id ? data : c));\r\n        setChats(updated);\r\n      }\r\n      toast({ title: \"Member removed\", status: \"success\", duration: 2000, isClosable: true });\r\n    } catch (err) {\r\n      toast({ title: \"Failed to remove\", description: err?.response?.data?.message || \"\", status: \"error\", duration: 3000, isClosable: true });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack\r\n      w={{ base: \"0\", xl: \"22%\" }}\r\n      display={{ base: \"none\", xl: \"flex\" }}\r\n      h=\"full\"\r\n      maxH=\"100%\"\r\n      minH=\"0\"\r\n      overflowY=\"auto\"\r\n      p={4}\r\n      spacing={4}\r\n      bg={isDark ? \"gray.800\" : \"white\"}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n      borderColor={isDark ? \"whiteAlpha.300\" : \"gray.200\"}\r\n      color={isDark ? \"gray.100\" : \"inherit\"}\r\n      align=\"stretch\"\r\n    >\r\n      {/* Header */}\r\n      <VStack spacing={2} align=\"center\" py={2}>\r\n        <Avatar size=\"xl\" name={isGroup ? chat?.chatName : getDisplayNameForUser(chat, otherUser?._id, otherUser?.name)} src={isGroup ? undefined : otherUser?.pic} />\r\n        <Text fontWeight=\"700\" fontSize=\"lg\" noOfLines={1}>\r\n          {isGroup ? chat?.chatName : getDisplayNameForUser(chat, otherUser?._id, otherUser?.name)}\r\n        </Text>\r\n        <Badge colorScheme=\"green\" variant=\"subtle\">Active now</Badge>\r\n      \r\n      </VStack>\r\n\r\n      <Divider borderColor={isDark ? \"whiteAlpha.300\" : \"gray.200\"} />\r\n\r\n      {/* Sections differ by chat type */}\r\n      {isGroup ? (\r\n        <VStack align=\"stretch\" spacing={2}>\r\n          <Accordion allowToggle>\r\n            <AccordionItem border=\"none\">\r\n              <AccordionButton _expanded={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }} borderRadius=\"md\" px={0}>\r\n                <Box as=\"span\" flex=\"1\" textAlign=\"left\" fontWeight=\"600\">Customize chat</Box>\r\n                <AccordionIcon />\r\n              </AccordionButton>\r\n              <AccordionPanel px={0} pb={2}>\r\n                <HStack justify=\"space-between\" p={2} borderRadius=\"md\" _hover={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }}>\r\n                  <HStack>\r\n                    <SunIcon color={iconColor} />\r\n                    <Text>Dark mode</Text>\r\n                  </HStack>\r\n                  <Switch isChecked={isDark} onChange={(e) => setAppTheme(e.target.checked ? \"dark\" : \"light\")} />\r\n                </HStack>\r\n                {isGroup && (\r\n                  <HStack justify=\"space-between\" p={2} borderRadius=\"md\" _hover={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }} mt={2}>\r\n                    <Text flex=\"1\">Group name</Text>\r\n                    <input\r\n                      defaultValue={chat?.chatName || \"\"}\r\n                      onBlur={(e) => {\r\n                        const value = e.target.value.trim();\r\n                        if (!value || value === chat?.chatName) return;\r\n                        // lazy import to keep top clean\r\n                        (async () => {\r\n                          try {\r\n                            const axios = (await import(\"axios\")).default;\r\n                            const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n                            const { data } = await axios.put(\"/api/chat/rename\", { chatId: chat._id, chatName: value }, config);\r\n                            setSelectedChat(data);\r\n                            if (Array.isArray(chats)) {\r\n                              const updated = chats.map((c) => (c._id === data._id ? data : c));\r\n                              setChats(updated);\r\n                            }\r\n                          } catch (err) {\r\n                            // silently ignore here; can add toast if desired\r\n                          }\r\n                        })();\r\n                      }}\r\n                      style={{\r\n                        background: isDark ? \"#374151\" : \"white\",\r\n                        color: isDark ? \"#E5E7EB\" : \"inherit\",\r\n                        border: \"1px solid\",\r\n                        borderColor: isDark ? \"rgba(255,255,255,0.2)\" : \"#E2E8F0\",\r\n                        borderRadius: 6,\r\n                        padding: \"6px 10px\",\r\n                        minWidth: 160,\r\n                      }}\r\n                    />\r\n                  </HStack>\r\n                )}\r\n              </AccordionPanel>\r\n            </AccordionItem>\r\n          </Accordion>\r\n\r\n          <Divider borderColor={isDark ? \"whiteAlpha.300\" : \"gray.200\"} />\r\n\r\n          <Accordion allowToggle>\r\n            <AccordionItem border=\"none\">\r\n              <AccordionButton _expanded={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }} borderRadius=\"md\" px={0}>\r\n                <Box as=\"span\" flex=\"1\" textAlign=\"left\" fontWeight=\"600\">Chat members</Box>\r\n                <AccordionIcon />\r\n              </AccordionButton>\r\n              <AccordionPanel px={0} pb={2}>\r\n                <VStack align=\"stretch\" spacing={1} maxH=\"260px\" overflowY=\"auto\">\r\n                  {(chat?.users || []).map((u) => (\r\n                    <HStack key={u._id} justify=\"space-between\" p={2} borderRadius=\"md\" _hover={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }}>\r\n                      <HStack>\r\n                        <Avatar size=\"sm\" name={u.name} src={u.pic} />\r\n                        <Text>\r\n                          {getDisplayNameForUser(chat, u._id, u.name)}\r\n                          {u._id === user._id ? \" (You)\" : \"\"}\r\n                        </Text>\r\n                      </HStack>\r\n                      {u._id !== user._id && (\r\n                        <IconButton\r\n                          aria-label=\"remove\"\r\n                          icon={<SmallCloseIcon />}\r\n                          size=\"xs\"\r\n                          variant=\"ghost\"\r\n                          color={iconColor}\r\n                          onClick={() => handleRemove(u._id)}\r\n                        />\r\n                      )}\r\n                    </HStack>\r\n                  ))}\r\n                </VStack>\r\n                <Box pt={2}>\r\n                  <AddMemberModal chat={chat} />\r\n                </Box>\r\n              </AccordionPanel>\r\n            </AccordionItem>\r\n          </Accordion>\r\n        </VStack>\r\n      ) : (\r\n        <VStack align=\"stretch\" spacing={2}>\r\n          <Accordion allowToggle>\r\n            <AccordionItem border=\"none\">\r\n              <AccordionButton _expanded={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }} borderRadius=\"md\" px={0}>\r\n                <Box as=\"span\" flex=\"1\" textAlign=\"left\" fontWeight=\"600\">Customize chat</Box>\r\n                <AccordionIcon />\r\n              </AccordionButton>\r\n              <AccordionPanel px={0} pb={2}>\r\n                <HStack justify=\"space-between\" p={2} borderRadius=\"md\" _hover={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }}>\r\n                  <HStack>\r\n                    <SunIcon color={iconColor} />\r\n                    <Text>Dark mode</Text>\r\n                  </HStack>\r\n                  <Switch isChecked={isDark} onChange={(e) => setAppTheme(e.target.checked ? \"dark\" : \"light\")} />\r\n                </HStack>\r\n              </AccordionPanel>\r\n            </AccordionItem>\r\n          </Accordion>\r\n        </VStack>\r\n      )}\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default ChatInfoPanel;\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Heading,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftElement,\r\n  VStack,\r\n  HStack,\r\n  Text,\r\n  Avatar,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { SearchIcon } from \"@chakra-ui/icons\";\r\nimport axios from \"axios\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst NewMessagePanel = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const { user, chats, setChats, setSelectedChat, appTheme } = ChatState();\r\n  const isDark = appTheme === \"dark\";\r\n\r\n  const search = async (q) => {\r\n    setQuery(q);\r\n    if (!q) return setResults([]);\r\n    const config = { headers: { Authorization: `Bearer ${user.token}` } };\r\n    const { data } = await axios.get(`/api/user?search=${encodeURIComponent(q)}`, config);\r\n    setResults(data);\r\n  };\r\n\r\n  const startChat = async (userId) => {\r\n    const config = { headers: { \"Content-type\": \"application/json\", Authorization: `Bearer ${user.token}` } };\r\n    const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n    if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n    setSelectedChat(data);\r\n  };\r\n\r\n  return (\r\n    <Box bg={isDark ? \"gray.800\" : \"white\"} borderWidth=\"1px\" borderRadius=\"lg\" p={6} h=\"100%\" color={isDark ? \"gray.100\" : \"inherit\"}>\r\n      <Heading size=\"md\" mb={3}>To:</Heading>\r\n      <InputGroup mb={4}>\r\n        <InputLeftElement pointerEvents=\"none\">\r\n          <SearchIcon color={isDark ? \"gray.300\" : \"brand.secondary\"} />\r\n        </InputLeftElement>\r\n        <Input placeholder=\"Search contacts\" value={query} onChange={(e) => search(e.target.value)} bg={isDark ? \"gray.700\" : \"white\"} borderColor={isDark ? \"whiteAlpha.300\" : undefined} />\r\n      </InputGroup>\r\n\r\n      <VStack align=\"stretch\" spacing={0} maxH=\"calc(100% - 100px)\" overflowY=\"auto\" borderWidth=\"1px\" borderRadius=\"md\" borderColor={isDark ? \"whiteAlpha.300\" : undefined}>\r\n        {!results.length && (\r\n          <Box p={6} color={isDark ? \"gray.400\" : \"gray.500\"}>Search and select a contact</Box>\r\n        )}\r\n        {results.map((u) => (\r\n          <HStack key={u._id} p={3} _hover={{ bg: isDark ? \"whiteAlpha.100\" : \"gray.50\" }} cursor=\"pointer\" onClick={() => startChat(u._id)}>\r\n            <Avatar size=\"sm\" name={u.name} src={u.pic} />\r\n            <VStack spacing={0} align=\"start\" flex={1}>\r\n              <Text fontWeight={600}>{u.name}</Text>\r\n              <Text fontSize=\"sm\" color={isDark ? \"gray.400\" : \"gray.500\"}>{u.email}</Text>\r\n            </VStack>\r\n            <Button size=\"sm\" bg=\"brand.primary\" _hover={{ bg: \"#1EB85A\" }} color=\"white\">Chat</Button>\r\n          </HStack>\r\n        ))}\r\n      </VStack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NewMessagePanel;\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, Button, Checkbox, VStack } from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\n\r\nconst UserModal = ({ onSelectUser, closeModal, selectedUsers }) => {\r\n  const [users, setUsers] = useState([]); // Fetch users from API\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/users/get-users\");\r\n        setUsers(response.data); // Store users in state\r\n      } catch (error) {\r\n        console.error(\"Error fetching users:\", error);\r\n      }\r\n    };\r\n\r\n    fetchUsers(); // Fetch users on component mount\r\n  }, []);\r\n\r\n  const handleUserSelect = (user) => {\r\n    // Check if user is already selected\r\n    const isSelected = selectedUsers.some((selected) => selected._id === user._id);\r\n\r\n    if (isSelected) {\r\n      // If user is selected, remove them\r\n      onSelectUser(selectedUsers.filter((selected) => selected._id !== user._id));\r\n    } else {\r\n      // If not selected, add them\r\n      onSelectUser([...selectedUsers, user]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={true} onClose={closeModal}>\r\n      <ModalOverlay />\r\n      <ModalContent>\r\n        <ModalHeader>Select Users to Add to Group</ModalHeader>\r\n        <ModalCloseButton />\r\n        <ModalBody>\r\n          <VStack spacing={4} align=\"stretch\">\r\n            {users.map((user) => (\r\n              <Checkbox\r\n                key={user._id}\r\n                isChecked={selectedUsers.some((selected) => selected._id === user._id)}\r\n                onChange={() => handleUserSelect(user)}\r\n              >\r\n                {user.username}\r\n              </Checkbox>\r\n            ))}\r\n          </VStack>\r\n          <Button mt={4} colorScheme=\"blue\" onClick={closeModal}>\r\n            Done\r\n          </Button>\r\n        </ModalBody>\r\n      </ModalContent>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default UserModal;\r\n","import { Box, Flex, Button } from \"@chakra-ui/react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport ChatInfoPanel from \"../components/ChatInfoPanel\";\r\nimport NewMessagePanel from \"../components/panels/NewMessagePanel\";\r\nimport axios from \"axios\";\r\nimport UserModal from \"../components/UserModal\"; // Correct import for the UserModal component\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user, appTheme } = ChatState();\r\n  const [showInfo, setShowInfo] = useState(false);\r\n  const [mode, setMode] = useState(\"chat\");\r\n  const [groups, setGroups] = useState([]); // Groups of the current user\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [showUserModal, setShowUserModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch groups the user is a part of\r\n    const fetchGroups = async () => {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/api/groups/get-groups\", {\r\n          headers: { Authorization: `Bearer ${user.token}` },\r\n        });\r\n        setGroups(response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching groups\", error);\r\n      }\r\n    };\r\n\r\n    if (user) {\r\n      fetchGroups();\r\n    }\r\n  }, [user, fetchAgain]);\r\n\r\n  const handleCreateGroup = async () => {\r\n    // Create the group and add selected users to it\r\n    try {\r\n      const response = await axios.post(\"http://localhost:5000/api/groups/create-group\", {\r\n        groupName: \"New Group\", // Replace with dynamic name if required\r\n        createdBy: user._id,\r\n        members: selectedUsers.map((user) => user._id),\r\n      });\r\n      setFetchAgain(!fetchAgain); // To trigger a refresh of groups\r\n      setShowUserModal(false); // Close user modal after creating group\r\n    } catch (error) {\r\n      console.error(\"Error creating group\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Flex\r\n        justifyContent=\"space-between\"\r\n        w=\"100%\"\r\n        h=\"100vh\"\r\n        p={{ base: 2, md: 4 }}\r\n        bg={appTheme === \"dark\" ? \"gray.900\" : \"gray.50\"}\r\n      >\r\n        {user && (\r\n          <MyChats\r\n            fetchAgain={fetchAgain}\r\n            variant=\"light\"\r\n            containerProps={{\r\n              w: { base: \"0\", md: \"28%\" },\r\n              display: { base: \"none\", md: \"flex\" },\r\n              h: \"100%\",\r\n            }}\r\n            onStartNew={() => setMode(\"new\")}\r\n            onSelectChat={() => setMode(\"chat\")}\r\n            groups={groups} // Pass groups to the sidebar\r\n          />\r\n        )}\r\n        {user && (\r\n          mode === \"new\" ? (\r\n            <Box flex={1} mx={{ base: 0, md: 4 }} h=\"100%\">\r\n              <NewMessagePanel />\r\n            </Box>\r\n          ) : (\r\n            <Chatbox\r\n              fetchAgain={fetchAgain}\r\n              setFetchAgain={setFetchAgain}\r\n              variant={appTheme === \"dark\" ? \"dark\" : \"light\"}\r\n              containerProps={{ flex: 1, mx: { base: 0, md: 4 }, h: \"100%\" }}\r\n              onToggleInfo={() => setShowInfo((v) => !v)}\r\n            />\r\n          )\r\n        )}\r\n        {user && showInfo && <ChatInfoPanel chat={ChatState().selectedChat} />}\r\n      </Flex>\r\n\r\n      {/* Button to open user modal for group creation */}\r\n      <Button onClick={() => setShowUserModal(true)} colorScheme=\"teal\" variant=\"solid\">\r\n        Create Group\r\n      </Button>\r\n\r\n      {/* Render UserModal to select users for creating a group */}\r\n      {showUserModal && (\r\n        <UserModal\r\n          onSelectUser={(user) => setSelectedUsers([...selectedUsers, user])}\r\n          closeModal={() => setShowUserModal(false)}\r\n          selectedUsers={selectedUsers}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { extendTheme, theme as base } from \"@chakra-ui/react\";\r\n\r\nconst fonts = {\r\n  heading: `Work Sans, ${base.fonts?.heading || \"system-ui\"}`,\r\n  body: `Inter, ${base.fonts?.body || \"system-ui\"}`,\r\n};\r\n\r\n// Calm & Professional (WhatsApp-like)\r\nconst colors = {\r\n  brand: {\r\n    primary: \"#25D366\", // fresh green\r\n    secondary: \"#075E54\", // deep teal\r\n    background: \"#F5F6FA\", // soft light gray (light mode)\r\n    text: \"#202C33\", // dark charcoal\r\n    surface: \"#FFFFFF\",\r\n  },\r\n};\r\n\r\nconst config = {\r\n  initialColorMode: \"light\",\r\n  useSystemColorMode: false,\r\n};\r\n\r\nconst components = {\r\n  Button: {\r\n    baseStyle: { fontWeight: 600 },\r\n    variants: {\r\n      solid: {\r\n        borderRadius: \"md\",\r\n        bg: colors.brand.primary,\r\n        color: \"white\",\r\n        _hover: { bg: \"#1EB85A\" },\r\n        _active: { bg: \"#197F40\" },\r\n      },\r\n      ghost: {\r\n        color: colors.brand.secondary,\r\n        _hover: { bg: \"rgba(7,94,84,0.08)\" },\r\n      },\r\n    },\r\n    defaultProps: { variant: \"solid\" },\r\n  },\r\n  Tabs: {\r\n    baseStyle: {\r\n      tab: { _selected: { color: colors.brand.secondary, borderColor: colors.brand.secondary } },\r\n    },\r\n  },\r\n  Accordion: {\r\n    baseStyle: {\r\n      button: {\r\n        _focus: { boxShadow: \"none\", outline: \"none\" },\r\n        _focusVisible: { boxShadow: \"none\", outline: \"none\" },\r\n      },\r\n    },\r\n  },\r\n  Input: {\r\n    defaultProps: { focusBorderColor: colors.brand.secondary },\r\n  },\r\n};\r\n\r\nconst styles = {\r\n  global: {\r\n    body: {\r\n      bg: colors.brand.background,\r\n      color: colors.brand.text,\r\n    },\r\n  },\r\n};\r\n\r\nconst customTheme = extendTheme({ fonts, components, styles, colors, config });\r\n\r\nexport default customTheme;\r\n\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport theme from \"./theme\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider theme={theme}>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}